
sev_seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000094  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000852  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000852  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  00000881  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  0000089d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001db3  00000000  00000000  0000093d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000720  00000000  00000000  000026f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000082c  00000000  00000000  00002e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  0000363c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022d  00000000  00000000  00003728  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000096d  00000000  00000000  00003955  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000042c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000007d0  000007d0  00000844  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004334  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000214  000002ec  000002ec  00000360  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.sev_seg_init 00000076  00000724  00000724  00000798  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.sev_seg_en1 0000000a  000007bc  000007bc  00000830  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.sev_seg_en2 0000000a  000007c6  000007c6  0000083a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.sev_seg_num_write 00000258  00000094  00000094  00000108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.M_Dio_PinMode 00000112  00000500  00000500  00000574  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.M_Dio_PinWrite 00000112  00000612  00000612  00000686  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.libgcc  0000000c  000007b0  000007b0  00000824  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_fini 00000002  000007d8  000007d8  0000084c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_funcs_on_exit 00000002  000007da  000007da  0000084e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_simulator_exit 00000002  000007dc  000007dc  00000850  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.exit    00000016  0000079a  0000079a  0000080e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text._Exit   00000004  000007d4  000007d4  00000848  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
   8:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
   c:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  10:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  14:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  18:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  1c:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  20:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  24:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  28:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  2c:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  30:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  34:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  38:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  3c:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  40:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  44:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  48:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  4c:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  50:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
  54:	9b 03       	fmulsu	r17, r19
  56:	a0 03       	fmuls	r18, r16
  58:	a5 03       	fmuls	r18, r21
  5a:	aa 03       	fmulsu	r18, r18
  5c:	af 03       	fmulsu	r18, r23
  5e:	b4 03       	fmuls	r19, r20
  60:	b9 03       	fmulsu	r19, r17
  62:	be 03       	fmulsu	r19, r22
  64:	c3 03       	fmuls	r20, r19
  66:	c8 03       	fmulsu	r20, r16
  68:	54 00       	.word	0x0054	; ????
  6a:	71 00       	.word	0x0071	; ????
  6c:	8e 00       	.word	0x008e	; ????
  6e:	ab 00       	.word	0x00ab	; ????
  70:	c8 00       	.word	0x00c8	; ????
  72:	e5 00       	.word	0x00e5	; ????
  74:	02 01       	movw	r0, r4
  76:	1f 01       	movw	r2, r30
  78:	3c 01       	movw	r6, r24
  7a:	59 01       	movw	r10, r18

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf e5       	ldi	r28, 0x5F	; 95
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 76 01 	call	0x2ec	; 0x2ec <main>
  8c:	0c 94 cd 03 	jmp	0x79a	; 0x79a <exit>

00000090 <_exit>:
  90:	f8 94       	cli

00000092 <__stop_program>:
  92:	ff cf       	rjmp	.-2      	; 0x92 <__stop_program>

Disassembly of section .text:

000007d0 <__bad_interrupt>:
 7d0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000002ec <main>:
# define F_CPU 1600000UL
#include <util/delay.h>
int main(void)
{
  
  sev_seg_init(sev_A);
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 92 03 	call	0x724	; 0x724 <sev_seg_init>
  sev_seg_init(sev_B);
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 92 03 	call	0x724	; 0x724 <sev_seg_init>
  sev_seg_init(sev_C);
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	0e 94 92 03 	call	0x724	; 0x724 <sev_seg_init>
  sev_seg_init(sev_D);
 2fe:	83 e0       	ldi	r24, 0x03	; 3
 300:	0e 94 92 03 	call	0x724	; 0x724 <sev_seg_init>
  sev_seg_init(sev_E);
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	0e 94 92 03 	call	0x724	; 0x724 <sev_seg_init>
  sev_seg_init(sev_F);
 30a:	85 e0       	ldi	r24, 0x05	; 5
 30c:	0e 94 92 03 	call	0x724	; 0x724 <sev_seg_init>
  sev_seg_init(sev_G);
 310:	86 e0       	ldi	r24, 0x06	; 6
 312:	0e 94 92 03 	call	0x724	; 0x724 <sev_seg_init>
  sev_seg_en2();
 316:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <sev_seg_en2>
  sev_seg_en1();
 31a:	0e 94 de 03 	call	0x7bc	; 0x7bc <sev_seg_en1>
  sev_seg_num_write(0);
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 324:	2f ef       	ldi	r18, 0xFF	; 255
 326:	83 ed       	ldi	r24, 0xD3	; 211
 328:	90 e3       	ldi	r25, 0x30	; 48
 32a:	21 50       	subi	r18, 0x01	; 1
 32c:	80 40       	sbci	r24, 0x00	; 0
 32e:	90 40       	sbci	r25, 0x00	; 0
 330:	e1 f7       	brne	.-8      	; 0x32a <main+0x3e>
 332:	00 c0       	rjmp	.+0      	; 0x334 <main+0x48>
 334:	00 00       	nop
  _delay_ms(10000);
    sev_seg_num_write(1);
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 33c:	2f ef       	ldi	r18, 0xFF	; 255
 33e:	83 ed       	ldi	r24, 0xD3	; 211
 340:	90 e3       	ldi	r25, 0x30	; 48
 342:	21 50       	subi	r18, 0x01	; 1
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <main+0x56>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0x60>
 34c:	00 00       	nop
    _delay_ms(10000);
      sev_seg_num_write(2);
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 354:	2f ef       	ldi	r18, 0xFF	; 255
 356:	83 ed       	ldi	r24, 0xD3	; 211
 358:	90 e3       	ldi	r25, 0x30	; 48
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	80 40       	sbci	r24, 0x00	; 0
 35e:	90 40       	sbci	r25, 0x00	; 0
 360:	e1 f7       	brne	.-8      	; 0x35a <main+0x6e>
 362:	00 c0       	rjmp	.+0      	; 0x364 <main+0x78>
 364:	00 00       	nop
      _delay_ms(10000);
        sev_seg_num_write(3);
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 36c:	2f ef       	ldi	r18, 0xFF	; 255
 36e:	83 ed       	ldi	r24, 0xD3	; 211
 370:	90 e3       	ldi	r25, 0x30	; 48
 372:	21 50       	subi	r18, 0x01	; 1
 374:	80 40       	sbci	r24, 0x00	; 0
 376:	90 40       	sbci	r25, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <main+0x86>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <main+0x90>
 37c:	00 00       	nop
        _delay_ms(10000);
          sev_seg_num_write(4);
 37e:	84 e0       	ldi	r24, 0x04	; 4
 380:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 384:	2f ef       	ldi	r18, 0xFF	; 255
 386:	83 ed       	ldi	r24, 0xD3	; 211
 388:	90 e3       	ldi	r25, 0x30	; 48
 38a:	21 50       	subi	r18, 0x01	; 1
 38c:	80 40       	sbci	r24, 0x00	; 0
 38e:	90 40       	sbci	r25, 0x00	; 0
 390:	e1 f7       	brne	.-8      	; 0x38a <main+0x9e>
 392:	00 c0       	rjmp	.+0      	; 0x394 <main+0xa8>
 394:	00 00       	nop
          _delay_ms(10000);
            sev_seg_num_write(5);
 396:	85 e0       	ldi	r24, 0x05	; 5
 398:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 39c:	2f ef       	ldi	r18, 0xFF	; 255
 39e:	83 ed       	ldi	r24, 0xD3	; 211
 3a0:	90 e3       	ldi	r25, 0x30	; 48
 3a2:	21 50       	subi	r18, 0x01	; 1
 3a4:	80 40       	sbci	r24, 0x00	; 0
 3a6:	90 40       	sbci	r25, 0x00	; 0
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <main+0xb6>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <main+0xc0>
 3ac:	00 00       	nop
            _delay_ms(10000);
              sev_seg_num_write(6);
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 3b4:	2f ef       	ldi	r18, 0xFF	; 255
 3b6:	83 ed       	ldi	r24, 0xD3	; 211
 3b8:	90 e3       	ldi	r25, 0x30	; 48
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0xce>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0xd8>
 3c4:	00 00       	nop
              _delay_ms(10000);
                sev_seg_num_write(7);
 3c6:	87 e0       	ldi	r24, 0x07	; 7
 3c8:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 3cc:	2f ef       	ldi	r18, 0xFF	; 255
 3ce:	83 ed       	ldi	r24, 0xD3	; 211
 3d0:	90 e3       	ldi	r25, 0x30	; 48
 3d2:	21 50       	subi	r18, 0x01	; 1
 3d4:	80 40       	sbci	r24, 0x00	; 0
 3d6:	90 40       	sbci	r25, 0x00	; 0
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <main+0xe6>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <main+0xf0>
 3dc:	00 00       	nop
                _delay_ms(10000);
                  sev_seg_num_write(8);
 3de:	88 e0       	ldi	r24, 0x08	; 8
 3e0:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 3e4:	2f ef       	ldi	r18, 0xFF	; 255
 3e6:	83 ed       	ldi	r24, 0xD3	; 211
 3e8:	90 e3       	ldi	r25, 0x30	; 48
 3ea:	21 50       	subi	r18, 0x01	; 1
 3ec:	80 40       	sbci	r24, 0x00	; 0
 3ee:	90 40       	sbci	r25, 0x00	; 0
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <main+0xfe>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <main+0x108>
 3f4:	00 00       	nop
                  _delay_ms(10000);
                    sev_seg_num_write(9);
 3f6:	89 e0       	ldi	r24, 0x09	; 9
 3f8:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 3fc:	2f ef       	ldi	r18, 0xFF	; 255
 3fe:	83 ed       	ldi	r24, 0xD3	; 211
 400:	90 e3       	ldi	r25, 0x30	; 48
 402:	21 50       	subi	r18, 0x01	; 1
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
                    _delay_ms(10000);
    while(1)
    {
         sev_seg_num_write(0);
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 414:	2f ef       	ldi	r18, 0xFF	; 255
 416:	83 ed       	ldi	r24, 0xD3	; 211
 418:	90 e3       	ldi	r25, 0x30	; 48
 41a:	21 50       	subi	r18, 0x01	; 1
 41c:	80 40       	sbci	r24, 0x00	; 0
 41e:	90 40       	sbci	r25, 0x00	; 0
 420:	e1 f7       	brne	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 424:	00 00       	nop
         _delay_ms(10000);
         sev_seg_num_write(1);
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 42c:	2f ef       	ldi	r18, 0xFF	; 255
 42e:	83 ed       	ldi	r24, 0xD3	; 211
 430:	90 e3       	ldi	r25, 0x30	; 48
 432:	21 50       	subi	r18, 0x01	; 1
 434:	80 40       	sbci	r24, 0x00	; 0
 436:	90 40       	sbci	r25, 0x00	; 0
 438:	e1 f7       	brne	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43c:	00 00       	nop
         _delay_ms(10000);
         sev_seg_num_write(2);
 43e:	82 e0       	ldi	r24, 0x02	; 2
 440:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 444:	2f ef       	ldi	r18, 0xFF	; 255
 446:	83 ed       	ldi	r24, 0xD3	; 211
 448:	90 e3       	ldi	r25, 0x30	; 48
 44a:	21 50       	subi	r18, 0x01	; 1
 44c:	80 40       	sbci	r24, 0x00	; 0
 44e:	90 40       	sbci	r25, 0x00	; 0
 450:	e1 f7       	brne	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 452:	00 c0       	rjmp	.+0      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 454:	00 00       	nop
         _delay_ms(10000);
         sev_seg_num_write(3);
 456:	83 e0       	ldi	r24, 0x03	; 3
 458:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 45c:	2f ef       	ldi	r18, 0xFF	; 255
 45e:	83 ed       	ldi	r24, 0xD3	; 211
 460:	90 e3       	ldi	r25, 0x30	; 48
 462:	21 50       	subi	r18, 0x01	; 1
 464:	80 40       	sbci	r24, 0x00	; 0
 466:	90 40       	sbci	r25, 0x00	; 0
 468:	e1 f7       	brne	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 46c:	00 00       	nop
         _delay_ms(10000);
         sev_seg_num_write(4);
 46e:	84 e0       	ldi	r24, 0x04	; 4
 470:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 474:	2f ef       	ldi	r18, 0xFF	; 255
 476:	83 ed       	ldi	r24, 0xD3	; 211
 478:	90 e3       	ldi	r25, 0x30	; 48
 47a:	21 50       	subi	r18, 0x01	; 1
 47c:	80 40       	sbci	r24, 0x00	; 0
 47e:	90 40       	sbci	r25, 0x00	; 0
 480:	e1 f7       	brne	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 482:	00 c0       	rjmp	.+0      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 484:	00 00       	nop
         _delay_ms(10000);
         sev_seg_num_write(5);
 486:	85 e0       	ldi	r24, 0x05	; 5
 488:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 48c:	2f ef       	ldi	r18, 0xFF	; 255
 48e:	83 ed       	ldi	r24, 0xD3	; 211
 490:	90 e3       	ldi	r25, 0x30	; 48
 492:	21 50       	subi	r18, 0x01	; 1
 494:	80 40       	sbci	r24, 0x00	; 0
 496:	90 40       	sbci	r25, 0x00	; 0
 498:	e1 f7       	brne	.-8      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 49c:	00 00       	nop
         _delay_ms(10000);
         sev_seg_num_write(6);
 49e:	86 e0       	ldi	r24, 0x06	; 6
 4a0:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 4a4:	2f ef       	ldi	r18, 0xFF	; 255
 4a6:	83 ed       	ldi	r24, 0xD3	; 211
 4a8:	90 e3       	ldi	r25, 0x30	; 48
 4aa:	21 50       	subi	r18, 0x01	; 1
 4ac:	80 40       	sbci	r24, 0x00	; 0
 4ae:	90 40       	sbci	r25, 0x00	; 0
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b4:	00 00       	nop
         _delay_ms(10000);
         sev_seg_num_write(7);
 4b6:	87 e0       	ldi	r24, 0x07	; 7
 4b8:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 4bc:	2f ef       	ldi	r18, 0xFF	; 255
 4be:	83 ed       	ldi	r24, 0xD3	; 211
 4c0:	90 e3       	ldi	r25, 0x30	; 48
 4c2:	21 50       	subi	r18, 0x01	; 1
 4c4:	80 40       	sbci	r24, 0x00	; 0
 4c6:	90 40       	sbci	r25, 0x00	; 0
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4cc:	00 00       	nop
         _delay_ms(10000);
         sev_seg_num_write(8);
 4ce:	88 e0       	ldi	r24, 0x08	; 8
 4d0:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 4d4:	2f ef       	ldi	r18, 0xFF	; 255
 4d6:	83 ed       	ldi	r24, 0xD3	; 211
 4d8:	90 e3       	ldi	r25, 0x30	; 48
 4da:	21 50       	subi	r18, 0x01	; 1
 4dc:	80 40       	sbci	r24, 0x00	; 0
 4de:	90 40       	sbci	r25, 0x00	; 0
 4e0:	e1 f7       	brne	.-8      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4e4:	00 00       	nop
         _delay_ms(10000);
         sev_seg_num_write(9);
 4e6:	89 e0       	ldi	r24, 0x09	; 9
 4e8:	0e 94 4a 00 	call	0x94	; 0x94 <__data_load_end>
 4ec:	2f ef       	ldi	r18, 0xFF	; 255
 4ee:	83 ed       	ldi	r24, 0xD3	; 211
 4f0:	90 e3       	ldi	r25, 0x30	; 48
 4f2:	21 50       	subi	r18, 0x01	; 1
 4f4:	80 40       	sbci	r24, 0x00	; 0
 4f6:	90 40       	sbci	r25, 0x00	; 0
 4f8:	e1 f7       	brne	.-8      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4fc:	00 00       	nop
 4fe:	87 cf       	rjmp	.-242    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>

Disassembly of section .text.sev_seg_init:

00000724 <sev_seg_init>:



void sev_seg_init(u8 local_u8_seg)
{
  switch (local_u8_seg)
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	8a 30       	cpi	r24, 0x0A	; 10
 728:	91 05       	cpc	r25, r1
 72a:	b0 f5       	brcc	.+108    	; 0x798 <sev_seg_init+0x74>
 72c:	fc 01       	movw	r30, r24
 72e:	e6 5d       	subi	r30, 0xD6	; 214
 730:	ff 4f       	sbci	r31, 0xFF	; 255
 732:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__tablejump2__>
  {
    case sev_A: M_Dio_PinMode(seg_A,OUTPUT);    break;
 736:	61 e0       	ldi	r22, 0x01	; 1
 738:	8b e0       	ldi	r24, 0x0B	; 11
 73a:	0e 94 80 02 	call	0x500	; 0x500 <M_Dio_PinMode>
 73e:	08 95       	ret
    case sev_B: M_Dio_PinMode(seg_B,OUTPUT);    break;
 740:	61 e0       	ldi	r22, 0x01	; 1
 742:	8c e0       	ldi	r24, 0x0C	; 12
 744:	0e 94 80 02 	call	0x500	; 0x500 <M_Dio_PinMode>
 748:	08 95       	ret
    case sev_C: M_Dio_PinMode(seg_C,OUTPUT);    break;
 74a:	61 e0       	ldi	r22, 0x01	; 1
 74c:	8d e0       	ldi	r24, 0x0D	; 13
 74e:	0e 94 80 02 	call	0x500	; 0x500 <M_Dio_PinMode>
 752:	08 95       	ret
    case sev_D: M_Dio_PinMode(seg_D,OUTPUT);    break;
 754:	61 e0       	ldi	r22, 0x01	; 1
 756:	8e e0       	ldi	r24, 0x0E	; 14
 758:	0e 94 80 02 	call	0x500	; 0x500 <M_Dio_PinMode>
 75c:	08 95       	ret
    case sev_E: M_Dio_PinMode(seg_E,OUTPUT);    break;
 75e:	61 e0       	ldi	r22, 0x01	; 1
 760:	8f e0       	ldi	r24, 0x0F	; 15
 762:	0e 94 80 02 	call	0x500	; 0x500 <M_Dio_PinMode>
 766:	08 95       	ret
    case sev_F: M_Dio_PinMode(seg_F,OUTPUT);    break;
 768:	61 e0       	ldi	r22, 0x01	; 1
 76a:	80 e1       	ldi	r24, 0x10	; 16
 76c:	0e 94 80 02 	call	0x500	; 0x500 <M_Dio_PinMode>
 770:	08 95       	ret
    case sev_G: M_Dio_PinMode(seg_G,OUTPUT);    break;
 772:	61 e0       	ldi	r22, 0x01	; 1
 774:	81 e1       	ldi	r24, 0x11	; 17
 776:	0e 94 80 02 	call	0x500	; 0x500 <M_Dio_PinMode>
 77a:	08 95       	ret
    case sev_DOT: M_Dio_PinMode(seg_dot,OUTPUT);    break;
 77c:	61 e0       	ldi	r22, 0x01	; 1
 77e:	84 e1       	ldi	r24, 0x14	; 20
 780:	0e 94 80 02 	call	0x500	; 0x500 <M_Dio_PinMode>
 784:	08 95       	ret
    
    case sev_dig_1: M_Dio_PinMode(dig_1,OUTPUT);    break;
 786:	61 e0       	ldi	r22, 0x01	; 1
 788:	84 e2       	ldi	r24, 0x24	; 36
 78a:	0e 94 80 02 	call	0x500	; 0x500 <M_Dio_PinMode>
 78e:	08 95       	ret
    case sev_dig_2: M_Dio_PinMode(dig_2,OUTPUT);    break;
 790:	61 e0       	ldi	r22, 0x01	; 1
 792:	85 e2       	ldi	r24, 0x25	; 37
 794:	0e 94 80 02 	call	0x500	; 0x500 <M_Dio_PinMode>
 798:	08 95       	ret

Disassembly of section .text.sev_seg_en1:

000007bc <sev_seg_en1>:
}

void sev_seg_en1()
{
  
  M_Dio_PinWrite(dig_1,HIGH);
 7bc:	61 e0       	ldi	r22, 0x01	; 1
 7be:	84 e2       	ldi	r24, 0x24	; 36
 7c0:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
 7c4:	08 95       	ret

Disassembly of section .text.sev_seg_en2:

000007c6 <sev_seg_en2>:
}

void sev_seg_en2()
{
  
  M_Dio_PinWrite(dig_2,HIGH);
 7c6:	61 e0       	ldi	r22, 0x01	; 1
 7c8:	85 e2       	ldi	r24, 0x25	; 37
 7ca:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
 7ce:	08 95       	ret

Disassembly of section .text.sev_seg_num_write:

00000094 <sev_seg_num_write>:
}


void sev_seg_num_write(u8 local_u8_seg)
{
 switch(local_u8_seg)
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	8a 30       	cpi	r24, 0x0A	; 10
  98:	91 05       	cpc	r25, r1
  9a:	08 f0       	brcs	.+2      	; 0x9e <sev_seg_num_write+0xa>
  9c:	26 c1       	rjmp	.+588    	; 0x2ea <sev_seg_num_write+0x256>
  9e:	fc 01       	movw	r30, r24
  a0:	ec 5c       	subi	r30, 0xCC	; 204
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__tablejump2__>
 {
    case 0: {
      M_Dio_PinWrite(seg_A , HIGH);
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	8b e0       	ldi	r24, 0x0B	; 11
  ac:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
      M_Dio_PinWrite(seg_B ,HIGH);
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	8c e0       	ldi	r24, 0x0C	; 12
  b4:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
      M_Dio_PinWrite(seg_C ,HIGH);
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	8d e0       	ldi	r24, 0x0D	; 13
  bc:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
      M_Dio_PinWrite(seg_D ,HIGH);
  c0:	61 e0       	ldi	r22, 0x01	; 1
  c2:	8e e0       	ldi	r24, 0x0E	; 14
  c4:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
      M_Dio_PinWrite(seg_E ,HIGH);
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	8f e0       	ldi	r24, 0x0F	; 15
  cc:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
      M_Dio_PinWrite(seg_F ,HIGH);
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	80 e1       	ldi	r24, 0x10	; 16
  d4:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
      M_Dio_PinWrite(seg_G ,LOW);}    break;
  d8:	62 e0       	ldi	r22, 0x02	; 2
  da:	81 e1       	ldi	r24, 0x11	; 17
  dc:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
  e0:	08 95       	ret
  case 1: {
    M_Dio_PinWrite(seg_A , LOW);
  e2:	62 e0       	ldi	r22, 0x02	; 2
  e4:	8b e0       	ldi	r24, 0x0B	; 11
  e6:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
    M_Dio_PinWrite(seg_B ,HIGH);
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	8c e0       	ldi	r24, 0x0C	; 12
  ee:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
    M_Dio_PinWrite(seg_C ,HIGH);
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	8d e0       	ldi	r24, 0x0D	; 13
  f6:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
    M_Dio_PinWrite(seg_D ,LOW);
  fa:	62 e0       	ldi	r22, 0x02	; 2
  fc:	8e e0       	ldi	r24, 0x0E	; 14
  fe:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
    M_Dio_PinWrite(seg_E ,LOW);
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	8f e0       	ldi	r24, 0x0F	; 15
 106:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
    M_Dio_PinWrite(seg_F ,LOW);
 10a:	62 e0       	ldi	r22, 0x02	; 2
 10c:	80 e1       	ldi	r24, 0x10	; 16
 10e:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
  M_Dio_PinWrite(seg_G ,LOW);}    break;
 112:	62 e0       	ldi	r22, 0x02	; 2
 114:	81 e1       	ldi	r24, 0x11	; 17
 116:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
 11a:	08 95       	ret
   case 2: {
     M_Dio_PinWrite(seg_A , HIGH);
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	8b e0       	ldi	r24, 0x0B	; 11
 120:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
     M_Dio_PinWrite(seg_B ,HIGH);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	8c e0       	ldi	r24, 0x0C	; 12
 128:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
     M_Dio_PinWrite(seg_C ,LOW);
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	8d e0       	ldi	r24, 0x0D	; 13
 130:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
     M_Dio_PinWrite(seg_D ,HIGH);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	8e e0       	ldi	r24, 0x0E	; 14
 138:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
     M_Dio_PinWrite(seg_E ,HIGH);
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	8f e0       	ldi	r24, 0x0F	; 15
 140:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
     M_Dio_PinWrite(seg_F ,LOW);
 144:	62 e0       	ldi	r22, 0x02	; 2
 146:	80 e1       	ldi	r24, 0x10	; 16
 148:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
   M_Dio_PinWrite(seg_G ,HIGH);}    break;
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	81 e1       	ldi	r24, 0x11	; 17
 150:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
 154:	08 95       	ret
    case 3: {
      M_Dio_PinWrite(seg_A , HIGH);
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	8b e0       	ldi	r24, 0x0B	; 11
 15a:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
      M_Dio_PinWrite(seg_B ,HIGH);
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	8c e0       	ldi	r24, 0x0C	; 12
 162:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
      M_Dio_PinWrite(seg_C ,HIGH);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	8d e0       	ldi	r24, 0x0D	; 13
 16a:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
      M_Dio_PinWrite(seg_D ,HIGH);
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	8e e0       	ldi	r24, 0x0E	; 14
 172:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
      M_Dio_PinWrite(seg_E ,LOW);
 176:	62 e0       	ldi	r22, 0x02	; 2
 178:	8f e0       	ldi	r24, 0x0F	; 15
 17a:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
      M_Dio_PinWrite(seg_F ,LOW);
 17e:	62 e0       	ldi	r22, 0x02	; 2
 180:	80 e1       	ldi	r24, 0x10	; 16
 182:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
    M_Dio_PinWrite(seg_G ,HIGH);}    break;
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	81 e1       	ldi	r24, 0x11	; 17
 18a:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
 18e:	08 95       	ret
     case 4: {
       M_Dio_PinWrite(seg_A , LOW);
 190:	62 e0       	ldi	r22, 0x02	; 2
 192:	8b e0       	ldi	r24, 0x0B	; 11
 194:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
       M_Dio_PinWrite(seg_B ,HIGH);
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	8c e0       	ldi	r24, 0x0C	; 12
 19c:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
       M_Dio_PinWrite(seg_C ,HIGH);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	8d e0       	ldi	r24, 0x0D	; 13
 1a4:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
       M_Dio_PinWrite(seg_D ,LOW);
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	8e e0       	ldi	r24, 0x0E	; 14
 1ac:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
       M_Dio_PinWrite(seg_E ,LOW);
 1b0:	62 e0       	ldi	r22, 0x02	; 2
 1b2:	8f e0       	ldi	r24, 0x0F	; 15
 1b4:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
       M_Dio_PinWrite(seg_F ,HIGH);
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	80 e1       	ldi	r24, 0x10	; 16
 1bc:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
     M_Dio_PinWrite(seg_G ,HIGH);}    break;
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	81 e1       	ldi	r24, 0x11	; 17
 1c4:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
 1c8:	08 95       	ret
      case 5: {
        M_Dio_PinWrite(seg_A , HIGH);
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	8b e0       	ldi	r24, 0x0B	; 11
 1ce:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
        M_Dio_PinWrite(seg_B ,LOW);
 1d2:	62 e0       	ldi	r22, 0x02	; 2
 1d4:	8c e0       	ldi	r24, 0x0C	; 12
 1d6:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
        M_Dio_PinWrite(seg_C ,HIGH);
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	8d e0       	ldi	r24, 0x0D	; 13
 1de:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
        M_Dio_PinWrite(seg_D ,HIGH);
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	8e e0       	ldi	r24, 0x0E	; 14
 1e6:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
        M_Dio_PinWrite(seg_E ,LOW);
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	8f e0       	ldi	r24, 0x0F	; 15
 1ee:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
        M_Dio_PinWrite(seg_F ,HIGH);
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	80 e1       	ldi	r24, 0x10	; 16
 1f6:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
      M_Dio_PinWrite(seg_G ,HIGH);}    break;
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	81 e1       	ldi	r24, 0x11	; 17
 1fe:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
 202:	08 95       	ret
       case 6: {
         M_Dio_PinWrite(seg_A , HIGH);
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	8b e0       	ldi	r24, 0x0B	; 11
 208:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
         M_Dio_PinWrite(seg_B ,LOW);
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	8c e0       	ldi	r24, 0x0C	; 12
 210:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
         M_Dio_PinWrite(seg_C ,HIGH);
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	8d e0       	ldi	r24, 0x0D	; 13
 218:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
         M_Dio_PinWrite(seg_D ,HIGH);
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	8e e0       	ldi	r24, 0x0E	; 14
 220:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
         M_Dio_PinWrite(seg_E ,HIGH);
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	8f e0       	ldi	r24, 0x0F	; 15
 228:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
         M_Dio_PinWrite(seg_F ,HIGH);
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	80 e1       	ldi	r24, 0x10	; 16
 230:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
       M_Dio_PinWrite(seg_G ,HIGH);}    break;
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	81 e1       	ldi	r24, 0x11	; 17
 238:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
 23c:	08 95       	ret
        case 7: {
          M_Dio_PinWrite(seg_A , HIGH);
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	8b e0       	ldi	r24, 0x0B	; 11
 242:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
          M_Dio_PinWrite(seg_B ,HIGH);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	8c e0       	ldi	r24, 0x0C	; 12
 24a:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
          M_Dio_PinWrite(seg_C ,HIGH);
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	8d e0       	ldi	r24, 0x0D	; 13
 252:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
          M_Dio_PinWrite(seg_D ,LOW);
 256:	62 e0       	ldi	r22, 0x02	; 2
 258:	8e e0       	ldi	r24, 0x0E	; 14
 25a:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
          M_Dio_PinWrite(seg_E ,LOW);
 25e:	62 e0       	ldi	r22, 0x02	; 2
 260:	8f e0       	ldi	r24, 0x0F	; 15
 262:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
          M_Dio_PinWrite(seg_F ,LOW);
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	80 e1       	ldi	r24, 0x10	; 16
 26a:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
        M_Dio_PinWrite(seg_G ,LOW);}    break;
 26e:	62 e0       	ldi	r22, 0x02	; 2
 270:	81 e1       	ldi	r24, 0x11	; 17
 272:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
 276:	08 95       	ret
         case 8: {
           M_Dio_PinWrite(seg_A , HIGH);
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	8b e0       	ldi	r24, 0x0B	; 11
 27c:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
           M_Dio_PinWrite(seg_B ,HIGH);
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	8c e0       	ldi	r24, 0x0C	; 12
 284:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
           M_Dio_PinWrite(seg_C ,HIGH);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	8d e0       	ldi	r24, 0x0D	; 13
 28c:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
           M_Dio_PinWrite(seg_D ,HIGH);
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	8e e0       	ldi	r24, 0x0E	; 14
 294:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
           M_Dio_PinWrite(seg_E ,HIGH);
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	8f e0       	ldi	r24, 0x0F	; 15
 29c:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
           M_Dio_PinWrite(seg_F ,HIGH);
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	80 e1       	ldi	r24, 0x10	; 16
 2a4:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
         M_Dio_PinWrite(seg_G ,HIGH);}    break;
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	81 e1       	ldi	r24, 0x11	; 17
 2ac:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
 2b0:	08 95       	ret
          case 9: {
            M_Dio_PinWrite(seg_A , HIGH);
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	8b e0       	ldi	r24, 0x0B	; 11
 2b6:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
            M_Dio_PinWrite(seg_B ,HIGH);
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	8c e0       	ldi	r24, 0x0C	; 12
 2be:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
            M_Dio_PinWrite(seg_C ,HIGH);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	8d e0       	ldi	r24, 0x0D	; 13
 2c6:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
            M_Dio_PinWrite(seg_D ,LOW);
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	8e e0       	ldi	r24, 0x0E	; 14
 2ce:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
            M_Dio_PinWrite(seg_E ,LOW);
 2d2:	62 e0       	ldi	r22, 0x02	; 2
 2d4:	8f e0       	ldi	r24, 0x0F	; 15
 2d6:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
            M_Dio_PinWrite(seg_F ,HIGH);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	80 e1       	ldi	r24, 0x10	; 16
 2de:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
          M_Dio_PinWrite(seg_G ,HIGH);}    break;
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	81 e1       	ldi	r24, 0x11	; 17
 2e6:	0e 94 09 03 	call	0x612	; 0x612 <M_Dio_PinWrite>
 2ea:	08 95       	ret

Disassembly of section .text.M_Dio_PinMode:

00000500 <M_Dio_PinMode>:
#include "Dio.h"


void M_Dio_PinMode(u8 Local_u8_Num, u8 Local_u8_Mode) //Local_u8_Pin to control pins,
{
  u8 Local_u8_Pin=Local_u8_Num % 10;
 500:	9d ec       	ldi	r25, 0xCD	; 205
 502:	89 9f       	mul	r24, r25
 504:	91 2d       	mov	r25, r1
 506:	11 24       	eor	r1, r1
 508:	29 2f       	mov	r18, r25
 50a:	26 95       	lsr	r18
 50c:	26 95       	lsr	r18
 50e:	26 95       	lsr	r18
 510:	22 0f       	add	r18, r18
 512:	32 2f       	mov	r19, r18
 514:	33 0f       	add	r19, r19
 516:	33 0f       	add	r19, r19
 518:	23 0f       	add	r18, r19
 51a:	82 1b       	sub	r24, r18
 51c:	28 2f       	mov	r18, r24
  u8 Local_u8_Port=Local_u8_Num / 10;
 51e:	96 95       	lsr	r25
 520:	96 95       	lsr	r25
 522:	96 95       	lsr	r25
  switch (Local_u8_Mode)
 524:	61 30       	cpi	r22, 0x01	; 1
 526:	19 f0       	breq	.+6      	; 0x52e <M_Dio_PinMode+0x2e>
 528:	62 30       	cpi	r22, 0x02	; 2
 52a:	c1 f1       	breq	.+112    	; 0x59c <M_Dio_PinMode+0x9c>
 52c:	08 95       	ret
  {
    case OUTPUT:
    switch (Local_u8_Port)
 52e:	92 30       	cpi	r25, 0x02	; 2
 530:	a1 f0       	breq	.+40     	; 0x55a <M_Dio_PinMode+0x5a>
 532:	18 f4       	brcc	.+6      	; 0x53a <M_Dio_PinMode+0x3a>
 534:	91 30       	cpi	r25, 0x01	; 1
 536:	31 f0       	breq	.+12     	; 0x544 <M_Dio_PinMode+0x44>
 538:	08 95       	ret
 53a:	93 30       	cpi	r25, 0x03	; 3
 53c:	c9 f0       	breq	.+50     	; 0x570 <M_Dio_PinMode+0x70>
 53e:	94 30       	cpi	r25, 0x04	; 4
 540:	11 f1       	breq	.+68     	; 0x586 <M_Dio_PinMode+0x86>
 542:	08 95       	ret
    {
      case 1: SetBit(DDRA,Local_u8_Pin); break;//PD3->OUTPUT
 544:	3a b3       	in	r19, 0x1a	; 26
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	02 c0       	rjmp	.+4      	; 0x550 <M_Dio_PinMode+0x50>
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	2a 95       	dec	r18
 552:	e2 f7       	brpl	.-8      	; 0x54c <M_Dio_PinMode+0x4c>
 554:	83 2b       	or	r24, r19
 556:	8a bb       	out	0x1a, r24	; 26
 558:	08 95       	ret
      case 2: SetBit(DDRB,Local_u8_Pin); break;//PD3->OUTPUT
 55a:	37 b3       	in	r19, 0x17	; 23
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	02 c0       	rjmp	.+4      	; 0x566 <M_Dio_PinMode+0x66>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	2a 95       	dec	r18
 568:	e2 f7       	brpl	.-8      	; 0x562 <M_Dio_PinMode+0x62>
 56a:	83 2b       	or	r24, r19
 56c:	87 bb       	out	0x17, r24	; 23
 56e:	08 95       	ret
      case 3: SetBit(DDRC,Local_u8_Pin); break;//PD3->OUTPUT
 570:	34 b3       	in	r19, 0x14	; 20
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 c0       	rjmp	.+4      	; 0x57c <M_Dio_PinMode+0x7c>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	2a 95       	dec	r18
 57e:	e2 f7       	brpl	.-8      	; 0x578 <M_Dio_PinMode+0x78>
 580:	83 2b       	or	r24, r19
 582:	84 bb       	out	0x14, r24	; 20
 584:	08 95       	ret
      case 4: SetBit(DDRD,Local_u8_Pin); break;//PD3->OUTPUT
 586:	31 b3       	in	r19, 0x11	; 17
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <M_Dio_PinMode+0x92>
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	2a 95       	dec	r18
 594:	e2 f7       	brpl	.-8      	; 0x58e <M_Dio_PinMode+0x8e>
 596:	83 2b       	or	r24, r19
 598:	81 bb       	out	0x11, r24	; 17
 59a:	08 95       	ret
      default:                           break;
    }
    break;
    case INPUT:
    switch (Local_u8_Port)
 59c:	92 30       	cpi	r25, 0x02	; 2
 59e:	a9 f0       	breq	.+42     	; 0x5ca <M_Dio_PinMode+0xca>
 5a0:	18 f4       	brcc	.+6      	; 0x5a8 <M_Dio_PinMode+0xa8>
 5a2:	91 30       	cpi	r25, 0x01	; 1
 5a4:	31 f0       	breq	.+12     	; 0x5b2 <M_Dio_PinMode+0xb2>
 5a6:	08 95       	ret
 5a8:	93 30       	cpi	r25, 0x03	; 3
 5aa:	d9 f0       	breq	.+54     	; 0x5e2 <M_Dio_PinMode+0xe2>
 5ac:	94 30       	cpi	r25, 0x04	; 4
 5ae:	29 f1       	breq	.+74     	; 0x5fa <M_Dio_PinMode+0xfa>
 5b0:	08 95       	ret
    {
      case 1: ClrBit(DDRA,Local_u8_Pin); break;//PD3->OUTPUT
 5b2:	3a b3       	in	r19, 0x1a	; 26
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <M_Dio_PinMode+0xbe>
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	2a 95       	dec	r18
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <M_Dio_PinMode+0xba>
 5c2:	80 95       	com	r24
 5c4:	83 23       	and	r24, r19
 5c6:	8a bb       	out	0x1a, r24	; 26
 5c8:	08 95       	ret
      case 2: ClrBit(DDRB,Local_u8_Pin); break;//PD3->OUTPUT
 5ca:	37 b3       	in	r19, 0x17	; 23
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <M_Dio_PinMode+0xd6>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	2a 95       	dec	r18
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <M_Dio_PinMode+0xd2>
 5da:	80 95       	com	r24
 5dc:	83 23       	and	r24, r19
 5de:	87 bb       	out	0x17, r24	; 23
 5e0:	08 95       	ret
      case 3: ClrBit(DDRC,Local_u8_Pin); break;//PD3->OUTPUT
 5e2:	34 b3       	in	r19, 0x14	; 20
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <M_Dio_PinMode+0xee>
 5ea:	88 0f       	add	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	2a 95       	dec	r18
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <M_Dio_PinMode+0xea>
 5f2:	80 95       	com	r24
 5f4:	83 23       	and	r24, r19
 5f6:	84 bb       	out	0x14, r24	; 20
 5f8:	08 95       	ret
      case 4: ClrBit(DDRD,Local_u8_Pin); break;//PD3->OUTPUT
 5fa:	31 b3       	in	r19, 0x11	; 17
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <M_Dio_PinMode+0x106>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	2a 95       	dec	r18
 608:	e2 f7       	brpl	.-8      	; 0x602 <M_Dio_PinMode+0x102>
 60a:	80 95       	com	r24
 60c:	83 23       	and	r24, r19
 60e:	81 bb       	out	0x11, r24	; 17
 610:	08 95       	ret

Disassembly of section .text.M_Dio_PinWrite:

00000612 <M_Dio_PinWrite>:
  }
}
void M_Dio_PinWrite(u8 Local_u8_Num, u8 Local_u8_Mode)
{
  //SetBit(PORTD,3); //PD3-> HIGH write 5v
  u8 Local_u8_Pin=Local_u8_Num % 10;
 612:	9d ec       	ldi	r25, 0xCD	; 205
 614:	89 9f       	mul	r24, r25
 616:	91 2d       	mov	r25, r1
 618:	11 24       	eor	r1, r1
 61a:	29 2f       	mov	r18, r25
 61c:	26 95       	lsr	r18
 61e:	26 95       	lsr	r18
 620:	26 95       	lsr	r18
 622:	22 0f       	add	r18, r18
 624:	32 2f       	mov	r19, r18
 626:	33 0f       	add	r19, r19
 628:	33 0f       	add	r19, r19
 62a:	23 0f       	add	r18, r19
 62c:	82 1b       	sub	r24, r18
 62e:	28 2f       	mov	r18, r24
  u8 Local_u8_Port=Local_u8_Num / 10;
 630:	96 95       	lsr	r25
 632:	96 95       	lsr	r25
 634:	96 95       	lsr	r25
  switch (Local_u8_Mode)
 636:	61 30       	cpi	r22, 0x01	; 1
 638:	19 f0       	breq	.+6      	; 0x640 <M_Dio_PinWrite+0x2e>
 63a:	62 30       	cpi	r22, 0x02	; 2
 63c:	c1 f1       	breq	.+112    	; 0x6ae <M_Dio_PinWrite+0x9c>
 63e:	08 95       	ret
  {
    case HIGH:
    switch (Local_u8_Port)
 640:	92 30       	cpi	r25, 0x02	; 2
 642:	a1 f0       	breq	.+40     	; 0x66c <M_Dio_PinWrite+0x5a>
 644:	18 f4       	brcc	.+6      	; 0x64c <M_Dio_PinWrite+0x3a>
 646:	91 30       	cpi	r25, 0x01	; 1
 648:	31 f0       	breq	.+12     	; 0x656 <M_Dio_PinWrite+0x44>
 64a:	08 95       	ret
 64c:	93 30       	cpi	r25, 0x03	; 3
 64e:	c9 f0       	breq	.+50     	; 0x682 <M_Dio_PinWrite+0x70>
 650:	94 30       	cpi	r25, 0x04	; 4
 652:	11 f1       	breq	.+68     	; 0x698 <M_Dio_PinWrite+0x86>
 654:	08 95       	ret
    {
      case 1: SetBit(PORTA,Local_u8_Pin); break;//PD3->OUTPUT
 656:	3b b3       	in	r19, 0x1b	; 27
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	02 c0       	rjmp	.+4      	; 0x662 <M_Dio_PinWrite+0x50>
 65e:	88 0f       	add	r24, r24
 660:	99 1f       	adc	r25, r25
 662:	2a 95       	dec	r18
 664:	e2 f7       	brpl	.-8      	; 0x65e <M_Dio_PinWrite+0x4c>
 666:	83 2b       	or	r24, r19
 668:	8b bb       	out	0x1b, r24	; 27
 66a:	08 95       	ret
      case 2: SetBit(PORTB,Local_u8_Pin); break;//PD3->OUTPUT
 66c:	38 b3       	in	r19, 0x18	; 24
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	02 c0       	rjmp	.+4      	; 0x678 <M_Dio_PinWrite+0x66>
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	2a 95       	dec	r18
 67a:	e2 f7       	brpl	.-8      	; 0x674 <M_Dio_PinWrite+0x62>
 67c:	83 2b       	or	r24, r19
 67e:	88 bb       	out	0x18, r24	; 24
 680:	08 95       	ret
      case 3: SetBit(PORTC,Local_u8_Pin); break;//PD3->OUTPUT
 682:	35 b3       	in	r19, 0x15	; 21
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	02 c0       	rjmp	.+4      	; 0x68e <M_Dio_PinWrite+0x7c>
 68a:	88 0f       	add	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	2a 95       	dec	r18
 690:	e2 f7       	brpl	.-8      	; 0x68a <M_Dio_PinWrite+0x78>
 692:	83 2b       	or	r24, r19
 694:	85 bb       	out	0x15, r24	; 21
 696:	08 95       	ret
      case 4: SetBit(PORTD,Local_u8_Pin); break;//PD3->OUTPUT
 698:	32 b3       	in	r19, 0x12	; 18
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <M_Dio_PinWrite+0x92>
 6a0:	88 0f       	add	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	2a 95       	dec	r18
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <M_Dio_PinWrite+0x8e>
 6a8:	83 2b       	or	r24, r19
 6aa:	82 bb       	out	0x12, r24	; 18
 6ac:	08 95       	ret
      default:                           break;
    }
    break;
    case LOW:
    switch (Local_u8_Port)
 6ae:	92 30       	cpi	r25, 0x02	; 2
 6b0:	a9 f0       	breq	.+42     	; 0x6dc <M_Dio_PinWrite+0xca>
 6b2:	18 f4       	brcc	.+6      	; 0x6ba <M_Dio_PinWrite+0xa8>
 6b4:	91 30       	cpi	r25, 0x01	; 1
 6b6:	31 f0       	breq	.+12     	; 0x6c4 <M_Dio_PinWrite+0xb2>
 6b8:	08 95       	ret
 6ba:	93 30       	cpi	r25, 0x03	; 3
 6bc:	d9 f0       	breq	.+54     	; 0x6f4 <M_Dio_PinWrite+0xe2>
 6be:	94 30       	cpi	r25, 0x04	; 4
 6c0:	29 f1       	breq	.+74     	; 0x70c <M_Dio_PinWrite+0xfa>
 6c2:	08 95       	ret
    {
      case 1: ClrBit(PORTA,Local_u8_Pin); break;//PD3->OUTPUT
 6c4:	3b b3       	in	r19, 0x1b	; 27
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <M_Dio_PinWrite+0xbe>
 6cc:	88 0f       	add	r24, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	2a 95       	dec	r18
 6d2:	e2 f7       	brpl	.-8      	; 0x6cc <M_Dio_PinWrite+0xba>
 6d4:	80 95       	com	r24
 6d6:	83 23       	and	r24, r19
 6d8:	8b bb       	out	0x1b, r24	; 27
 6da:	08 95       	ret
      case 2: ClrBit(PORTB,Local_u8_Pin); break;//PD3->OUTPUT
 6dc:	38 b3       	in	r19, 0x18	; 24
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <M_Dio_PinWrite+0xd6>
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	2a 95       	dec	r18
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <M_Dio_PinWrite+0xd2>
 6ec:	80 95       	com	r24
 6ee:	83 23       	and	r24, r19
 6f0:	88 bb       	out	0x18, r24	; 24
 6f2:	08 95       	ret
      case 3: ClrBit(PORTC,Local_u8_Pin); break;//PD3->OUTPUT
 6f4:	35 b3       	in	r19, 0x15	; 21
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <M_Dio_PinWrite+0xee>
 6fc:	88 0f       	add	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	2a 95       	dec	r18
 702:	e2 f7       	brpl	.-8      	; 0x6fc <M_Dio_PinWrite+0xea>
 704:	80 95       	com	r24
 706:	83 23       	and	r24, r19
 708:	85 bb       	out	0x15, r24	; 21
 70a:	08 95       	ret
      case 4: ClrBit(PORTD,Local_u8_Pin); break;//PD3->OUTPUT
 70c:	32 b3       	in	r19, 0x12	; 18
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	02 c0       	rjmp	.+4      	; 0x718 <M_Dio_PinWrite+0x106>
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	2a 95       	dec	r18
 71a:	e2 f7       	brpl	.-8      	; 0x714 <M_Dio_PinWrite+0x102>
 71c:	80 95       	com	r24
 71e:	83 23       	and	r24, r19
 720:	82 bb       	out	0x12, r24	; 18
 722:	08 95       	ret

Disassembly of section .text.libgcc:

000007b0 <__tablejump2__>:
 7b0:	ee 0f       	add	r30, r30
 7b2:	ff 1f       	adc	r31, r31
 7b4:	05 90       	lpm	r0, Z+
 7b6:	f4 91       	lpm	r31, Z
 7b8:	e0 2d       	mov	r30, r0
 7ba:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

000007d8 <_fini>:
 7d8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000007da <__funcs_on_exit>:
 7da:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000007dc <__simulator_exit>:
 7dc:	08 95       	ret

Disassembly of section .text.exit:

0000079a <exit>:
 79a:	ec 01       	movw	r28, r24
 79c:	0e 94 ed 03 	call	0x7da	; 0x7da <__funcs_on_exit>
 7a0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <_fini>
 7a4:	ce 01       	movw	r24, r28
 7a6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__simulator_exit>
 7aa:	ce 01       	movw	r24, r28
 7ac:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_Exit>

Disassembly of section .text._Exit:

000007d4 <_Exit>:
 7d4:	0e 94 48 00 	call	0x90	; 0x90 <_exit>
